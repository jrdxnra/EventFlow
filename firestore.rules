rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is team member
    function isTeamMember(teamId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)) &&
        request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members;
    }
    
    // Helper function to check if user has permission
    function hasPermission(permission) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)) &&
        permission in get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.permissions;
    }

    // Events collection - allow read/write for authenticated users
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if hasPermission('delete') || isAdmin();
    }
    
    // Team events - simplified rules for now
    match /teamEvents/{eventId} {
      allow read, write: if isAuthenticated();
    }
    
    // Individual events - simplified rules for now
    match /individualEvents/{eventId} {
      allow read, write: if isAuthenticated();
    }
    
    // User profiles - users can read/write their own profile, admins can read all
    match /userProfiles/{profileId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.uid) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if isAuthenticated() && (isOwner(resource.data.uid) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Teams - team members can read, admins can read/write
    match /teams/{teamId} {
      allow read: if isAuthenticated() && (isTeamMember(teamId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isTeamMember(teamId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Coaches - authenticated users can read/write
    match /coaches/{coachId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Contacts - authenticated users can read/write
    match /contacts/{contactId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
    
    // Event logistics - authenticated users can read/write
    match /eventLogistics/{logisticsId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }
  }
} 